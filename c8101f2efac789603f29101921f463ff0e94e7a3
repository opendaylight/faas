{
  "comments": [
    {
      "key": {
        "uuid": "1aa4ed85_1f5e2de7",
        "filename": "fabric-mgr/fabric-mgr-impl/src/main/java/org/opendaylight/faas/fabricmgr/FabricMgrProvider.java",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 3573
      },
      "writtenOn": "2015-12-19T15:31:17Z",
      "side": 1,
      "message": "ConcurrentHashMap is a better way, since it gives more options...",
      "revId": "c8101f2efac789603f29101921f463ff0e94e7a3",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1aa4ed85_bf72797a",
        "filename": "fabric-mgr/fabric-mgr-impl/src/main/java/org/opendaylight/faas/fabricmgr/FabricMgrProvider.java",
        "patchSetId": 1
      },
      "lineNbr": 81,
      "author": {
        "id": 3573
      },
      "writtenOn": "2015-12-19T15:31:17Z",
      "side": 1,
      "message": "This loop is not thread safe, since another thread could remove a value during the loop. However, you could solve this problem by using ConcurrentHashMap. Then loop over entryList",
      "revId": "c8101f2efac789603f29101921f463ff0e94e7a3",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1aa4ed85_df6f3591",
        "filename": "fabric-mgr/fabric-mgr-impl/src/main/java/org/opendaylight/faas/fabricmgr/VcLdNodeConfigDataMgr.java",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 3573
      },
      "writtenOn": "2015-12-19T15:31:17Z",
      "side": 1,
      "message": "Please ConcurrentHashMap, see previous comments",
      "revId": "c8101f2efac789603f29101921f463ff0e94e7a3",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1aa4ed85_ff0f91df",
        "filename": "uln-mapper/uln-model/src/main/java/org/opendaylight/faas/uln/manager/UlnMappingEngine.java",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 3573
      },
      "writtenOn": "2015-12-19T15:31:17Z",
      "side": 1,
      "message": "I don\u0027t believe this provides full sync. if you want have full sunc, then synchronize the map as follows:\n synchronized(mymap) { // mymap shouldn\u0027t be null\n//one thread can access the entire map at a time\n}",
      "revId": "c8101f2efac789603f29101921f463ff0e94e7a3",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1aa4ed85_1f15cdf0",
        "filename": "uln-mapper/uln-model/src/main/java/org/opendaylight/faas/uln/manager/UserLogicalNetworkCache.java",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 3573
      },
      "writtenOn": "2015-12-19T15:31:17Z",
      "side": 1,
      "message": "My understanding of full sync is one thread can access the entire map at one time. If so, this way doesn\u0027t give that. ConcurrentHashMap is a better way. However, you could lock the map via synchronized(map) block.",
      "revId": "c8101f2efac789603f29101921f463ff0e94e7a3",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}